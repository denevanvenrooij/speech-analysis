
# def extract_cpp(audio_file, quef_min=3.3e-3, quef_max=16.7e-3): ## this range corresponds to 60-300 Hz
#     sound = parselmouth.Sound(audio_file)
    
#     cepstrum = sound.to_cepstrum()
#     quefrencies = cepstrum.xs()
#     cepstrum_values = cepstrum.values.T[0]

#     index = (quefrencies >= quef_min) & (quefrencies <= quef_max) ## the range to search in

#     if not np.any(index):
#         print("No peaks found, check audio file")
#         return None, None 
    
#     peak_value = np.max(cepstrum_values[index])
#     noise_floor = np.mean(cepstrum_values[~index])

#     cpp = peak_value - noise_floor ## CPP is difference between the peak and the noise

#     return cpp ## named CPP


# def extract_cpp_sd(audio_file, quef_min=3.3e-3, quef_max=16.7e-3): ## this range corresponds to 60-300 Hz
#     sound = parselmouth.Sound(audio_file)
    
#     cepstrum = sound.to_cepstrum()
#     quefrencies = cepstrum.xs()
#     cepstrum_values = cepstrum.values.T[0]

#     frame = (quefrencies >= quef_min) & (quefrencies <= quef_max) ## the range to search in

#     if not np.any(frame):
#         print("No peaks found in any frame, check audio file")
#         return None, None 

#     cpp_values = cepstrum_values[frame] ## CPP SD is calculated for all relevant (non-zero) frames
#     cpp_sd = np.std(cpp_values)

#     return cpp_sd ## named CPP_SD


# def extract_cpp_murton(audio_file, quef_min=3.3e-3, quef_max=16.7e-3, window_length=40.96e-3, step_size=10.24e-3): ## this range corresponds to 60-300 Hz
#     sound = parselmouth.Sound(audio_file)
    
#     cepstrum = sound.to_cepstrum(window_length=window_length, time_step=step_size)
#     quefrencies = cepstrum.xs()
#     cepstrum_values = cepstrum.values.T[0]
    
#     index = (quefrencies >= quef_min) & (quefrencies <= quef_max) ## the range to search in

#     if not np.any(index):
#         print("No peaks found, check audio file")
#         return None, None 

#     peak_value = np.max(cepstrum_values[index])
#     noise_floor = np.mean(cepstrum_values[~index])

#     cpp_values = peak_value - noise_floor ## CPP is difference between the peak and the noise
#     cpp_murton = [cpp_value for cpp_value in cpp_values if np.percentile(cpp_values, 5) <= cpp_value <= np.percentile(cpp_values, 95)]

#     return cpp_murton ## named CPP_M


# def extract_cpp_sd_murton(audio_file, quef_min=3.3e-3, quef_max=16.7e-3, window_length=40.96e-3, step_size=10.24e-3): ## this range corresponds to 60-300 Hz
#     sound = parselmouth.Sound(audio_file)
    
#     cepstrum = sound.to_cepstrum(window_length=window_length, time_step=step_size)
#     quefrencies = cepstrum.xs()
#     cepstrum_values = cepstrum.values.T[0]

#     frame = (quefrencies >= quef_min) & (quefrencies <= quef_max) ## the range to search in

#     if not np.any(frame):
#         print("No peaks found in any frame, check audio file")
#         return None, None 

#     cpp_values = cepstrum_values[frame] ## CPP SD is calculated for all relevant (non-zero) frames
#     cpp_values = [cpp_value for cpp_value in cpp_values if np.percentile(cpp_values, 5) <= cpp_value <= np.percentile(cpp_values, 95)]
    
#     cpp_sd_murton = np.std(cpp_values)

#     return cpp_sd_murton ## named CPP_SD_M